# -*- coding: utf-8 -*-
"""Membuat Model Machine Learning dengan Data Time Series - Jena Climate Dataset.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1754Gd-3VXcVI2_nujfgq4TZtI9qRDJPW

# Download Dataset from Kaggle
"""

!pip install -q kaggle

from google.colab import files
files.upload()

!mkdir -p ~/.kaggle
!cp kaggle.json ~/.kaggle/
!chmod 600 ~/.kaggle/kaggle.json
!ls ~/.kaggle

!kaggle datasets download -d mnassrib/jena-climate

!mkdir jena-climate
!unzip jena-climate.zip -d jena-climate
!ls jena-climate

"""# Load Dataset

"""

import pandas as pd
data_train = pd.read_csv('jena-climate/jena_climate_2009_2016.csv')
data_train.head(10)

data_train.rename(columns = {'Date Time':'datetime', 
                     'p (mbar)':'p',
                     'T (degC)':'tempc', 
                     'Tpot (K)':'tpot',
                     'Tdew (degC)':'tdew',
                     'VPmax (mbar)':'vpmax',
                     'VPact (mbar)':'vpact',
                     'VPdef (mbar)':'vdef',
                     'H2OC (mmol/mol)':'h20c',
                     }, inplace = True)

data_train.columns

data_train.shape

data_train.info()

data_train.isnull().sum()

data_train['datetime']=pd.to_datetime(data_train['datetime'])
data_train['datetime'].head()
data_train['tempc'].fillna(data_train['tempc'].mean(), inplace=True)
data_train = data_train[['datetime','tempc' ]]
data_train.head()

data_train.info()

"""# Model & Plot"""

dates = data_train['datetime'].values
temp = data_train['tempc'].values

import matplotlib.pyplot as plt

plt.figure(figsize=(20,5))
plt.plot(dates,temp)
plt.title('Jena Weather')
plt.xlabel('Date')
plt.ylabel('Temperature in Celcius')
plt.show()

import tensorflow as tf

def windowed_dataset(series, window_size, batch_size, shuffle_buffer):
    series = tf.expand_dims(series, axis=-1)
    ds = tf.data.Dataset.from_tensor_slices(series)
    ds = ds.window(window_size + 1, shift=1, drop_remainder=True)
    ds = ds.flat_map(lambda w: w.batch(window_size + 1))
    ds = ds.shuffle(shuffle_buffer)
    ds = ds.map(lambda w: (w[:-1], w[-1:]))
    return ds.batch(batch_size).prefetch(1)

from sklearn.model_selection import train_test_split

x_train, x_test, y_train, y_test = train_test_split(temp, dates, test_size = 0.2, random_state = 0 , shuffle=False)
print(len(x_train), len(x_test))

from keras.layers import Dense, LSTM

data_x_train = windowed_dataset(x_train, window_size=60, batch_size=100, shuffle_buffer=5000)
data_x_test = windowed_dataset(x_test, window_size=60, batch_size=100, shuffle_buffer=5000)

model = tf.keras.models.Sequential([
  tf.keras.layers.Conv1D(filters=32, kernel_size=5,
                      strides=1, padding="causal",
                      activation="relu",
                      input_shape=[None, 1]),
  tf.keras.layers.LSTM(64, return_sequences=True),
  tf.keras.layers.LSTM(64, return_sequences=True),
  tf.keras.layers.Dense(30, activation="relu"),
  tf.keras.layers.Dense(10, activation="relu"),
  tf.keras.layers.Dense(1),
  tf.keras.layers.Lambda(lambda x: x * 400)
])

learning_rate_schedule = tf.keras.callbacks.LearningRateScheduler(
    lambda epoch: 1e-8 * 10**(epoch / 20))
optimizer = tf.keras.optimizers.SGD(learning_rate=1e-8, momentum=0.9)
model.compile(loss=tf.keras.losses.Huber(),
              optimizer=optimizer,
              metrics=["mae"])

max = data_train['tempc'].max()
print('Max value : ' )
print(max)

min = data_train['tempc'].min()
print('Min Value : ')
print(min)

class myCallback(tf.keras.callbacks.Callback):
  def on_epoch_end(self, epoch, logs={}):
    if(logs.get('mae')< 3.3):
      self.model.stop_training = True
      print("\nMAE of the model < 10% of data scale")
callbacks = myCallback()

tf.keras.backend.set_floatx('float64')
history = model.fit(data_x_train ,epochs=500, validation_data=data_x_test, callbacks=[callbacks])

# plot of mae
import matplotlib.pyplot as plt
plt.plot(history.history['mae'])
plt.plot(history.history['val_mae'])
plt.title('MAE')
plt.ylabel('mae')
plt.xlabel('epoch')
plt.legend(['train', 'test'], loc='upper left')
plt.show()

# plot of loss
plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title('Model Loss')
plt.ylabel('loss')
plt.xlabel('epoch')
plt.legend(['train', 'test'], loc='upper left')
plt.show()